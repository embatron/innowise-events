<?php

/**
 * Implements hook_entity_presave().
 */
function innowise_events_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'event') {
    $end_date = $entity->get('event_end_date')->value;
    if ($end_date) {
      $current_date = new \DateTime();
      $event_end_date = new \DateTime($end_date);

      if ($event_end_date < $current_date) {
        $entity->set('status', 0);
      } else {
        $entity->set('status', 1);
      }
    }

    // Обработка координат города.
    $city = $entity->get('city')->value;
    $coordinates = innowise_events_get_city_coordinates($city);
    if ($coordinates) {
      $entity->set('latitude', $coordinates['latitude']);
      $entity->set('longitude', $coordinates['longitude']);
    } else {
      \Drupal::logger('innowise_events')->error('Coordinates not found for city: @city', ['@city' => $city]);
    }
  }

  if ($entity->getEntityTypeId() === 'mock_event') {
    $end_date = $entity->get('field_end_date')->value;
    if ($end_date) {
      $current_date = new \DateTime();
      $event_end_date = new \DateTime($end_date);

      if ($event_end_date < $current_date) {
        $entity->set('field_event_s_status', 0);
      } else {
        $entity->set('field_event_s_status', 1);
      }
    }
  }
}

/**
 * Helper function to get cities list from JSON.
 */
function innowise_events_get_cities() {
  $module_path = \Drupal::service('extension.list.module')->getPath('innowise_events');
  $file_path = $module_path . '/data/world_cities.json';

  if (!file_exists($file_path)) {
    \Drupal::logger('innowise_events')->error('City JSON file not found: @file', ['@file' => $file_path]);
    return [];
  }

  $json = file_get_contents($file_path);
  $data = json_decode($json, TRUE);

  return $data['cities'] ?? [];
}

/**
 * Retrieves the coordinates of a city from JSON.
 *
 * @param string $city
 *   The name of the city.
 *
 * @return array|null
 *   An associative array with latitude and longitude, or NULL if the city is not found.
 */
function innowise_events_get_city_coordinates($city) {
  $module_path = \Drupal::service('extension.list.module')->getPath('innowise_events');
  $file_path = $module_path . '/data/world_cities.json';

  if (!file_exists($file_path)) {
    \Drupal::logger('innowise_events')->error('JSON file not found: @path', ['@path' => $file_path]);
    return NULL;
  }

  $json = file_get_contents($file_path);
  $data = json_decode($json, TRUE);

  foreach ($data['cities'] as $city_data) {
    if (strcasecmp($city_data['name'], $city) === 0) {
      return [
        'latitude' => $city_data['latitude'],
        'longitude' => $city_data['longitude'],
      ];
    }
  }

  return NULL;
}

/**
 * Implements hook_entity_view().
 */
function innowise_events_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode, $langcode) {
  if (in_array($entity->getEntityTypeId(), ['event', 'mock_event'])) {
    $route_name = $entity->getEntityTypeId() === 'event' ? 'event.register' : 'innowise_events.mock_event_register_ajax';
    $route_param = $entity->getEntityTypeId() === 'event' ? ['event' => $entity->id()] : ['mock_event' => $entity->id()];

    $build['register_button'] = [
      '#type' => 'link',
      '#title' => t('Register'),
      '#url' => \Drupal\Core\Url::fromRoute($route_name, $route_param),
      '#attributes' => [
        'class' => ['button', 'button--primary', 'use-ajax'],
      ],
      '#attached' => [
        'library' => ['core/drupal.ajax', 'innowise_events/register'],
      ],
      '#weight' => 100,
    ];

    $build['register_message'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'register-message'],
      '#weight' => 101,
    ];

    if (in_array($entity->getEntityTypeId(), ['event', 'mock_event'])) {
      $block_manager = \Drupal::service('plugin.manager.block');
      $plugin_block = $block_manager->createInstance('event_weather_block', []);

      if ($entity->getEntityTypeId() === 'event') {
        $plugin_block->setContextValue('event', $entity);
      }
      elseif ($entity->getEntityTypeId() === 'mock_event') {
        $plugin_block->setContextValue('mock_event', $entity);
      }

      $build['event_weather'] = $plugin_block->build();
    }
  }
}


/**
 * Implements hook_theme().
 */
function innowise_events_theme() {
  return [
    'event_weather' => [
      'variables' => [
        'weather' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function innowise_events_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'innowise_events/innowise_events_styles';
}

/**
 * Implements hook_cron().
 */
function innowise_events_cron() {
  $logger = \Drupal::logger('innowise_events');

  $storage = \Drupal::entityTypeManager()->getStorage('event');
  $query = $storage->getQuery()
    ->accessCheck(FALSE)
    ->execute();

  $updated_events = [];
  if (!empty($query)) {
    $entities = $storage->loadMultiple($query);
    foreach ($entities as $entity) {
      $end_date = $entity->get('event_end_date')->value;
      if ($end_date) {
        $current_date = new \DateTime();
        $event_end_date = new \DateTime($end_date);

        if ($event_end_date < $current_date) {
          $entity->set('status', 0);
          $entity->save();
          $updated_events[] = $entity->id();
        }
      }
    }
  }

  if (!empty($updated_events)) {
    $logger->info('Updated event entities: @ids', [
      '@ids' => implode(', ', $updated_events),
    ]);
  } else {
    $logger->info('No event entities were updated.');
  }

  $mock_storage = \Drupal::entityTypeManager()->getStorage('mock_event');
  $mock_query = $mock_storage->getQuery()
    ->accessCheck(FALSE)
    ->execute();

  $updated_mock_events = [];
  if (!empty($mock_query)) {
    $mock_entities = $mock_storage->loadMultiple($mock_query);
    foreach ($mock_entities as $mock_entity) {
      $end_date = $mock_entity->get('field_end_date')->value;
      if ($end_date) {
        $current_date = new \DateTime();
        $mock_event_end_date = new \DateTime($end_date);

        if ($mock_event_end_date < $current_date) {
          $mock_entity->set('field_event_s_status', 0);
          $mock_entity->save();
          $updated_mock_events[] = $mock_entity->id();
        }
      }
    }
  }

  if (!empty($updated_mock_events)) {
    $logger->info('Updated mock_event entities: @ids', [
      '@ids' => implode(', ', $updated_mock_events),
    ]);
  } else {
    $logger->info('No mock_event entities were updated.');
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function innowise_events_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {
  if ($entity->getEntityTypeId() === 'event' && isset($build['participants'])) {
    unset($build['participants']);
  }
}